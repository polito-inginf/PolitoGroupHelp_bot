// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.2
// source: messageDecoder.proto

package messagedecoder

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MessageDecoder_Decode_FullMethodName = "/messagedecoder.MessageDecoder/Decode"
)

// MessageDecoderClient is the client API for MessageDecoder service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MessageDecoderClient interface {
	Decode(ctx context.Context, in *TgMessageInfo, opts ...grpc.CallOption) (*DecoderResult, error)
}

type messageDecoderClient struct {
	cc grpc.ClientConnInterface
}

func NewMessageDecoderClient(cc grpc.ClientConnInterface) MessageDecoderClient {
	return &messageDecoderClient{cc}
}

func (c *messageDecoderClient) Decode(ctx context.Context, in *TgMessageInfo, opts ...grpc.CallOption) (*DecoderResult, error) {
	out := new(DecoderResult)
	err := c.cc.Invoke(ctx, MessageDecoder_Decode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MessageDecoderServer is the server API for MessageDecoder service.
// All implementations must embed UnimplementedMessageDecoderServer
// for forward compatibility
type MessageDecoderServer interface {
	Decode(context.Context, *TgMessageInfo) (*DecoderResult, error)
	mustEmbedUnimplementedMessageDecoderServer()
}

// UnimplementedMessageDecoderServer must be embedded to have forward compatible implementations.
type UnimplementedMessageDecoderServer struct {
}

func (UnimplementedMessageDecoderServer) Decode(context.Context, *TgMessageInfo) (*DecoderResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Decode not implemented")
}
func (UnimplementedMessageDecoderServer) mustEmbedUnimplementedMessageDecoderServer() {}

// UnsafeMessageDecoderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MessageDecoderServer will
// result in compilation errors.
type UnsafeMessageDecoderServer interface {
	mustEmbedUnimplementedMessageDecoderServer()
}

func RegisterMessageDecoderServer(s grpc.ServiceRegistrar, srv MessageDecoderServer) {
	s.RegisterService(&MessageDecoder_ServiceDesc, srv)
}

func _MessageDecoder_Decode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TgMessageInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageDecoderServer).Decode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessageDecoder_Decode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageDecoderServer).Decode(ctx, req.(*TgMessageInfo))
	}
	return interceptor(ctx, in, info, handler)
}

// MessageDecoder_ServiceDesc is the grpc.ServiceDesc for MessageDecoder service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MessageDecoder_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "messagedecoder.MessageDecoder",
	HandlerType: (*MessageDecoderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Decode",
			Handler:    _MessageDecoder_Decode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "messageDecoder.proto",
}
